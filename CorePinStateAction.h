#ifndef _CORE_PIN_STATE_ACTION_H
#define _CORE_PIN_STATE_ACTION_H
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <Arduino.h>
#include "CoreConfig.h"
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// класс для выполнения периодической смены состояний на цифровом пине
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// структура настроек
typedef struct
{
  uint8_t Pin; // номер пина, на который таймер будет выдавать сигнал
  uint16_t HoldOnTime; // сколько времени держать сигнал "включено", в миллисекундах
  uint16_t HoldOffTime; // сколько времени держать сигнал "выключено", в миллисекундах
  int16_t NumPasses; // кол-во циклов повторений (-1 - бесконечно)
    
} CorePinStateSettings;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
typedef struct
{
  bool isHoldOnTimer : 1; // если true - то ждём истечения периода включения, иначе - истечение периода выключения
  uint8_t lastPinState : 2;
  uint8_t isActive : 1;
  uint8_t stateOn : 2; 
  uint8_t stateOff : 2; 
  
} CorePinStateFlags;
//--------------------------------------------------------------------------------------------------------------------------------
class CorePinStateAction
{
 public:
  CorePinStateAction();
  
  CorePinStateSettings Settings; // настройки таймера
  
  void update(); // обновляет таймер

  bool isActive(); // возвращает true, если таймер активен
  bool isDone(); // проверяет, закончили ли работу, если кол-во проходов отлично от бесконечного
  
  void init(uint8_t pin, int16_t NumPasses, uint16_t HoldOnTime, uint16_t HoldOffTime, uint8_t OnLevel=HIGH, uint8_t OffLevel=LOW); // инициализирует таймер
  void reset(); // сбрасывает кол-во сделанных проходов

  void on(); // устанавливает на пине уровень OnLevel
  void off(); // устанавливает на пине уровень OffLevel

  void enable(){ flags.isActive = true; } // включает таймер
  void disable(){ flags.isActive = false; } // выключает таймер

private:

  CorePinStateFlags flags;
  unsigned long timerPast, tTimer; // таймеры
  int16_t cyclesDone; // кол-во сделанных проходов
};
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#endif
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
